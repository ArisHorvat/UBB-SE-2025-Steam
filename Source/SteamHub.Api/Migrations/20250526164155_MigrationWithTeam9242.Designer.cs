// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250526164155_MigrationWithTeam9242")]
    partial class MigrationWithTeam9242
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "TagsTagId");

                    b.ToTable("GameTag");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 3
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 4
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 3
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 5
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 4,
                            TagsTagId = 5
                        },
                        new
                        {
                            GamesGameId = 4,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 5,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 5,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 6,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 6,
                            TagsTagId = 14
                        },
                        new
                        {
                            GamesGameId = 7,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 8,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 8,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 9,
                            TagsTagId = 10
                        },
                        new
                        {
                            GamesGameId = 9,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 10,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 10,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 11,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 11,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 12,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 13,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 13,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 14,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 14,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 15,
                            TagsTagId = 11
                        },
                        new
                        {
                            GamesGameId = 15,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 16,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 16,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 17,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 17,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 18,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 18,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 14
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 16
                        },
                        new
                        {
                            GamesGameId = 20,
                            TagsTagId = 16
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CorrespondingGameId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CorrespondingGameId = 3,
                            Description = "A sleek and aggressive finish for your AK-47.",
                            ImagePath = "https://steamcdn-a.akamaihd.net/apps/730/icons/econ/default_generated/weapon_ak47_cu_ak47_cobra_light_large.7494bfdf4855fd4e6a2dbd983ed0a243c80ef830.png",
                            IsListed = true,
                            ItemName = "AK-47 | Redline Skin",
                            Price = 29.99f
                        },
                        new
                        {
                            ItemId = 2,
                            CorrespondingGameId = 3,
                            Description = "Legendary pistol skin with a fiery design.",
                            ImagePath = "https://steamcdn-a.akamaihd.net/apps/730/icons/econ/default_generated/weapon_deagle_aa_flames_light_large.dd140c3b359c16ccd8e918ca6ad0b2628151fe1c.png",
                            IsListed = true,
                            ItemName = "Desert Eagle | Blaze Skin",
                            Price = 34.99f
                        },
                        new
                        {
                            ItemId = 3,
                            CorrespondingGameId = 4,
                            Description = "Iconic weapon that manipulates objects with physics.",
                            ImagePath = "https://www.toyark.com/wp-content/uploads/2013/05/Half-Life-2-Gravity-Gun-007.jpg",
                            IsListed = true,
                            ItemName = "Gravity Gun Replica",
                            Price = 49.99f
                        },
                        new
                        {
                            ItemId = 4,
                            CorrespondingGameId = 4,
                            Description = "Protective gloves from the HEV suit worn by Gordon Freeman.",
                            ImagePath = "https://preview.redd.it/hl2-revision-update-the-grabbity-gloves-v0-ftz143vjmqcb1.jpg?width=640&crop=smart&auto=webp&s=9b3738a0f4bce98cc6a38b34e6ec319d03c05dd0",
                            IsListed = true,
                            ItemName = "HEV Suit Gloves",
                            Price = 19.99f
                        },
                        new
                        {
                            ItemId = 5,
                            CorrespondingGameId = 5,
                            Description = "A soft collectible version of the iconic power-up.",
                            ImagePath = "https://mario.wiki.gallery/images/thumb/7/7e/New_Super_Mario_Bros._U_Deluxe_Fire_Flower.png/1200px-New_Super_Mario_Bros._U_Deluxe_Fire_Flower.png",
                            IsListed = false,
                            ItemName = "Fire Flower",
                            Price = 14.99f
                        },
                        new
                        {
                            ItemId = 6,
                            CorrespondingGameId = 5,
                            Description = "The classic red cap worn by Mario himself.",
                            ImagePath = "https://static.wikia.nocookie.net/mario/images/c/cd/Mario_Cap.png/revision/latest?cb=20180310022043",
                            IsListed = false,
                            ItemName = "Mario Cap",
                            Price = 24.99f
                        },
                        new
                        {
                            ItemId = 7,
                            CorrespondingGameId = 6,
                            Description = "Faithful replica of Link's legendary blade.",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/f/f9/Master_Sword_Lead.png",
                            IsListed = false,
                            ItemName = "Master Sword Replica",
                            Price = 69.99f
                        },
                        new
                        {
                            ItemId = 8,
                            CorrespondingGameId = 6,
                            Description = "Sturdy shield bearing the crest of Hyrule.",
                            ImagePath = "https://theswordstall.co.uk/cdn/shop/files/Legend-Of-Zelda-Deluxe-Hylian-Shield-Full-Metal-3.jpg?v=1723552799&width=750",
                            IsListed = false,
                            ItemName = "Hylian Shield",
                            Price = 59.99f
                        },
                        new
                        {
                            ItemId = 9,
                            CorrespondingGameId = 15,
                            Description = "Miniature version of the famous mining tool.",
                            ImagePath = "https://static.posters.cz/image/1300/merch/replica-minecraft-diamond-pickaxe-i94007.jpg",
                            IsListed = false,
                            ItemName = "Diamond Pickaxe",
                            Price = 9.99f
                        },
                        new
                        {
                            ItemId = 10,
                            CorrespondingGameId = 15,
                            Description = "Soft plush of the infamous explosive mob.",
                            ImagePath = "https://feltright.com/cdn/shop/files/minecraft-creeper.jpg?v=1720033057&width=800",
                            IsListed = false,
                            ItemName = "Creeper Plush",
                            Price = 19.99f
                        },
                        new
                        {
                            ItemId = 11,
                            CorrespondingGameId = 19,
                            Description = "A high-tech gauntlet to hack and crush foes in Cyberstrike 2077.",
                            ImagePath = "https://static.wikia.nocookie.net/shop-heroes/images/4/4a/Gauntlets_Cybernetic_Gauntlets_Blueprint.png/revision/latest?cb=20200724020856",
                            IsListed = true,
                            ItemName = "Cybernetic Gauntlet",
                            Price = 34.99f
                        },
                        new
                        {
                            ItemId = 12,
                            CorrespondingGameId = 19,
                            Description = "A visor that enhances your vision in the neon-lit battles of Cyberstrike 2077.",
                            ImagePath = "https://www.motocentral.co.uk/cdn/shop/files/Ruroc-EOX-Cyberstrike_-From-Moto-Central-_-Fast-Free-UK-Delivery-257043288_1024x.jpg?v=1744036882",
                            IsListed = false,
                            ItemName = "Neon Visor",
                            Price = 24.99f
                        },
                        new
                        {
                            ItemId = 13,
                            CorrespondingGameId = 20,
                            Description = "A mighty axe for the warriors of Shadow of Valhalla.",
                            ImagePath = "https://valhalla-vikings.co.uk/cdn/shop/products/il_fullxfull.3370240260_td4v.jpg?v=1679150085&width=1080",
                            IsListed = false,
                            ItemName = "Viking Axe",
                            Price = 44.99f
                        },
                        new
                        {
                            ItemId = 14,
                            CorrespondingGameId = 20,
                            Description = "A robust shield forged for the bravest of fighters in Shadow of Valhalla.",
                            ImagePath = "https://www.vikingsroar.com/cdn/shop/products/d7f00df1f2c5a9059ec5dd319139da24.webp?v=1652049514",
                            IsListed = true,
                            ItemName = "Valhalla Shield",
                            Price = 34.99f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeId"));

                    b.Property<bool>("AcceptedByDestinationUser")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptedBySourceUser")
                        .HasColumnType("bit");

                    b.Property<int>("DestinationUserId")
                        .HasColumnType("int");

                    b.Property<int>("GameOfTradeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeStatus")
                        .HasColumnType("int");

                    b.HasKey("TradeId");

                    b.HasIndex("DestinationUserId");

                    b.HasIndex("SourceUserId");

                    b.ToTable("ItemTrades");

                    b.HasData(
                        new
                        {
                            TradeId = 1,
                            AcceptedByDestinationUser = false,
                            AcceptedBySourceUser = false,
                            DestinationUserId = 8,
                            GameOfTradeId = 6,
                            SourceUserId = 4,
                            TradeDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 1: AliceJ offers Legend of Zelda to EmilyB",
                            TradeStatus = 0
                        },
                        new
                        {
                            TradeId = 2,
                            AcceptedByDestinationUser = false,
                            AcceptedBySourceUser = true,
                            DestinationUserId = 4,
                            GameOfTradeId = 19,
                            SourceUserId = 5,
                            TradeDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 2: LiamG offers Cyberstrike 2077 to AliceJ",
                            TradeStatus = 0
                        },
                        new
                        {
                            TradeId = 3,
                            AcceptedByDestinationUser = true,
                            AcceptedBySourceUser = true,
                            DestinationUserId = 6,
                            GameOfTradeId = 20,
                            SourceUserId = 7,
                            TradeDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 3: NoahS offers Shadow of Valhalla to SophieW",
                            TradeStatus = 1
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTradeDetail", b =>
                {
                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSourceUserItem")
                        .HasColumnType("bit");

                    b.HasKey("TradeId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemTradeDetails");

                    b.HasData(
                        new
                        {
                            TradeId = 1,
                            ItemId = 7,
                            IsSourceUserItem = true
                        },
                        new
                        {
                            TradeId = 2,
                            ItemId = 12,
                            IsSourceUserItem = true
                        },
                        new
                        {
                            TradeId = 3,
                            ItemId = 13,
                            IsSourceUserItem = false
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Property<int>("PointShopItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointShopItemId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointPrice")
                        .HasColumnType("float");

                    b.HasKey("PointShopItemId");

                    b.ToTable("PointShopItems");

                    b.HasData(
                        new
                        {
                            PointShopItemId = 1,
                            Description = "A cool blue background for your profile",
                            ImagePath = "https://picsum.photos/id/1/200/200",
                            ItemType = "ProfileBackground",
                            Name = "Blue Profile Background",
                            PointPrice = 1000.0
                        },
                        new
                        {
                            PointShopItemId = 2,
                            Description = "A vibrant red background for your profile",
                            ImagePath = "https://picsum.photos/id/20/200/200",
                            ItemType = "ProfileBackground",
                            Name = "Red Profile Background",
                            PointPrice = 1000.0
                        },
                        new
                        {
                            PointShopItemId = 3,
                            Description = "A golden frame for your avatar image",
                            ImagePath = "https://picsum.photos/id/30/200/200",
                            ItemType = "AvatarFrame",
                            Name = "Golden Avatar Frame",
                            PointPrice = 2000.0
                        },
                        new
                        {
                            PointShopItemId = 4,
                            Description = "A silver frame for your avatar image",
                            ImagePath = "https://picsum.photos/id/40/200/200",
                            ItemType = "AvatarFrame",
                            Name = "Silver Avatar Frame",
                            PointPrice = 1500.0
                        },
                        new
                        {
                            PointShopItemId = 5,
                            Description = "Express yourself with this happy emoticon",
                            ImagePath = "https://picsum.photos/id/50/200/200",
                            ItemType = "Emoticon",
                            Name = "Happy Emoticon",
                            PointPrice = 500.0
                        },
                        new
                        {
                            PointShopItemId = 6,
                            Description = "Express yourself with this sad emoticon",
                            ImagePath = "https://picsum.photos/id/60/200/200",
                            ItemType = "Emoticon",
                            Name = "Sad Emoticon",
                            PointPrice = 500.0
                        },
                        new
                        {
                            PointShopItemId = 7,
                            Description = "Cool gamer avatar for your profile",
                            ImagePath = "https://picsum.photos/id/70/200/200",
                            ItemType = "Avatar",
                            Name = "Gamer Avatar",
                            PointPrice = 1200.0
                        },
                        new
                        {
                            PointShopItemId = 8,
                            Description = "Stealthy ninja avatar for your profile",
                            ImagePath = "https://picsum.photos/id/80/200/200",
                            ItemType = "Avatar",
                            Name = "Ninja Avatar",
                            PointPrice = 1200.0
                        },
                        new
                        {
                            PointShopItemId = 9,
                            Description = "Space-themed mini profile",
                            ImagePath = "https://picsum.photos/id/90/200/200",
                            ItemType = "MiniProfile",
                            Name = "Space Mini-Profile",
                            PointPrice = 3000.0
                        },
                        new
                        {
                            PointShopItemId = 10,
                            Description = "Fantasy-themed mini profile",
                            ImagePath = "https://picsum.photos/id/100/200/200",
                            ItemType = "MiniProfile",
                            Name = "Fantasy Mini-Profile",
                            PointPrice = 3000.0
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "User"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.StoreTransaction", b =>
                {
                    b.Property<int>("StoreTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreTransactionId"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WithMoney")
                        .HasColumnType("bit");

                    b.HasKey("StoreTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreTransactions");

                    b.HasData(
                        new
                        {
                            StoreTransactionId = 1,
                            Amount = 14.99f,
                            Date = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            GameId = 5,
                            UserId = 4,
                            WithMoney = true
                        },
                        new
                        {
                            StoreTransactionId = 2,
                            Amount = 34.99f,
                            Date = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            GameId = 20,
                            UserId = 7,
                            WithMoney = false
                        },
                        new
                        {
                            StoreTransactionId = 3,
                            Amount = 29.99f,
                            Date = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            GameId = 15,
                            UserId = 4,
                            WithMoney = true
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Rogue-Like"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Third-Person Shooter"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "First-Person Shooter"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Action"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Adventure"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Exploration"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Arcade"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Racing"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Action RPG"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Battle Royale"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeveloper")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 933, DateTimeKind.Local).AddTicks(5037),
                            Email = "gabe.newell@valvestudio.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(1912),
                            Password = "secret",
                            PointsBalance = 6000f,
                            ProfilePicture = new byte[0],
                            RoleId = 1,
                            UserName = "GabeN",
                            WalletBalance = 500f
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3555),
                            Email = "mathias.new@cdprojektred.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3577),
                            Password = "secret",
                            PointsBalance = 5000f,
                            ProfilePicture = new byte[0],
                            RoleId = 1,
                            UserName = "MattN",
                            WalletBalance = 420f
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3584),
                            Email = "john.chen@thatgamecompany.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3587),
                            Password = "secret",
                            PointsBalance = 5000f,
                            ProfilePicture = new byte[0],
                            RoleId = 1,
                            UserName = "JohnC",
                            WalletBalance = 390f
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3591),
                            Email = "alice.johnson@example.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3594),
                            Password = "secret",
                            PointsBalance = 6000f,
                            ProfilePicture = new byte[0],
                            RoleId = 0,
                            UserName = "AliceJ",
                            WalletBalance = 780f
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3600),
                            Email = "liam.garcia@example.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3603),
                            Password = "secret",
                            PointsBalance = 7000f,
                            ProfilePicture = new byte[0],
                            RoleId = 0,
                            UserName = "LiamG",
                            WalletBalance = 5500f
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3668),
                            Email = "sophie.williams@example.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3671),
                            Password = "secret",
                            PointsBalance = 6000f,
                            ProfilePicture = new byte[0],
                            RoleId = 0,
                            UserName = "SophieW",
                            WalletBalance = 950f
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3677),
                            Email = "noah.smith@example.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3679),
                            Password = "secret",
                            PointsBalance = 4000f,
                            ProfilePicture = new byte[0],
                            RoleId = 0,
                            UserName = "NoahS",
                            WalletBalance = 3300f
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3684),
                            Email = "emily.brown@example.com",
                            IsDeveloper = false,
                            LastLogin = new DateTime(2025, 5, 26, 19, 41, 51, 940, DateTimeKind.Local).AddTicks(3687),
                            Password = "secret",
                            PointsBalance = 5000f,
                            ProfilePicture = new byte[0],
                            RoleId = 0,
                            UserName = "EmilyB",
                            WalletBalance = 1100f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ItemId", "GameId");

                    b.HasIndex("ItemId");

                    b.ToTable("UserInventories");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            ItemId = 5,
                            GameId = 5,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 7,
                            GameId = 6,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 9,
                            GameId = 15,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 10,
                            GameId = 15,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 6,
                            GameId = 5,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 8,
                            GameId = 6,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 12,
                            GameId = 19,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 6,
                            ItemId = 13,
                            GameId = 20,
                            AcquiredDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserPointShopItemInventory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PointShopItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PointShopItemId");

                    b.HasIndex("PointShopItemId");

                    b.ToTable("UserPointShopInventories");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 1,
                            IsActive = false,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 2,
                            IsActive = true,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 5,
                            IsActive = false,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PointShopItemId = 2,
                            IsActive = true,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PointShopItemId = 6,
                            IsActive = false,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 6,
                            PointShopItemId = 3,
                            IsActive = false,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 7,
                            PointShopItemId = 4,
                            IsActive = true,
                            PurchaseDate = new DateTime(2025, 4, 27, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UsersGames", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInWishlist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            GameId = 3,
                            IsInCart = false,
                            IsInWishlist = true,
                            IsPurchased = false
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 5,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 6,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 15,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 5,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 6,
                            IsInCart = true,
                            IsInWishlist = false,
                            IsPurchased = false
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 19,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 6,
                            GameId = 20,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 7,
                            GameId = 20,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 8,
                            GameId = 15,
                            IsInCart = true,
                            IsInWishlist = false,
                            IsPurchased = false
                        });
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("achievement_name");

                    b.Property<string>("AchievementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("achievement_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon_url");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ChatConversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<int>("User1Id")
                        .HasColumnType("int")
                        .HasColumnName("user1_id");

                    b.Property<int>("User2Id")
                        .HasColumnType("int")
                        .HasColumnName("user2_id");

                    b.HasKey("ConversationId");

                    b.ToTable("ChatConversations", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_content");

                    b.Property<string>("MessageFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_format");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<long>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MessageId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Collections.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("CoverPicture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cover_picture");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Collections", null, t =>
                        {
                            t.HasTrigger("SomeTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploadDate");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postId");

                    b.HasKey("CommentId");

                    b.ToTable("NewsComments", "dbo");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("Equipped")
                        .HasColumnType("bit")
                        .HasColumnName("equipped");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("FeatureId");

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.FeatureUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    b.Property<bool>("Equipped")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("equipped");

                    b.HasKey("UserId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("Feature_User", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ForumComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.HasKey("Id");

                    b.ToTable("ForumComments", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<int?>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("ForumPosts", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.FriendEntity", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FriendshipId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("User1Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("User1Username");

                    b.Property<string>("User2Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("User2Username");

                    b.HasKey("FriendshipId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.FriendRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SenderEmail");

                    b.Property<string>("ProfilePhotoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SenderProfilePhotoPath");

                    b.Property<string>("ReceiverUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReceiverUsername");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("RequestDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SenderUsername");

                    b.HasKey("RequestId");

                    b.HasIndex("Username", "ReceiverUsername")
                        .IsUnique()
                        .HasDatabaseName("UQ_SenderReceiver");

                    b.ToTable("FriendRequests", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("friendship_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<int>("FriendId")
                        .HasColumnType("int")
                        .HasColumnName("friend_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FriendId")
                        .HasDatabaseName("IX_Friendships_FriendId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Friendships_UserId");

                    b.HasIndex("UserId", "FriendId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Friendship");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Game.CollectionGame", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.HasKey("CollectionId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("OwnedGames_Collection", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Game.OwnedGame", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("CoverPicture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cover_picture");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("GameId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_OwnedGames_UserId");

                    b.ToTable("OwnedGames", null, t =>
                        {
                            t.HasTrigger("SomeTrigger")
                                .HasDatabaseName("SomeTrigger1");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_time");

                    b.Property<string>("ResetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reset_code");

                    b.Property<bool>("Used")
                        .HasColumnType("bit")
                        .HasColumnName("used");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetCodes", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("NrComments")
                        .HasColumnType("int")
                        .HasColumnName("nrComments");

                    b.Property<int>("NrDislikes")
                        .HasColumnType("int")
                        .HasColumnName("nrDislikes");

                    b.Property<int>("NrLikes")
                        .HasColumnType("int")
                        .HasColumnName("nrLikes");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploadDate");

                    b.HasKey("Id");

                    b.ToTable("NewsPosts", "dbo");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.PostRatingType", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postId");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<bool>("RatingType")
                        .HasColumnType("bit")
                        .HasColumnName("ratingType");

                    b.HasKey("PostId", "AuthorId");

                    b.ToTable("NewsRatings", "dbo");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Review", b =>
                {
                    b.Property<int>("ReviewIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewIdentifier"));

                    b.Property<DateTime>("DateAndTimeWhenReviewWasCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("GameIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("GameId");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit")
                        .HasColumnName("IsRecommended");

                    b.Property<decimal>("NumericRatingGivenByUser")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Rating");

                    b.Property<string>("ReviewContentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("ReviewTitleText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("TotalFunnyVotesReceived")
                        .HasColumnType("int")
                        .HasColumnName("FunnyVotes");

                    b.Property<int>("TotalHelpfulVotesReceived")
                        .HasColumnType("int")
                        .HasColumnName("HelpfulVotes");

                    b.Property<int>("TotalHoursPlayedByReviewer")
                        .HasColumnType("int")
                        .HasColumnName("HoursPlayed");

                    b.Property<int>("UserIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("ReviewIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ReviewsUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ProfilePicture");

                    b.HasKey("UserId");

                    b.ToTable("ReviewsUsers", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Session.SessionDetails", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.SoldGame", b =>
                {
                    b.Property<int>("SoldGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sold_game_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoldGameId"));

                    b.Property<int?>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sold_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SoldGameId");

                    b.HasIndex("UserId");

                    b.ToTable("SoldGames", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserAchievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("UnlockedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("unlocked_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserDislikedComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.HasKey("UserId", "CommentId");

                    b.ToTable("UserDislikedComment", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserDislikedPost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.HasKey("UserId", "PostId");

                    b.ToTable("UserDislikedPost", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserLikedComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.HasKey("UserId", "CommentId");

                    b.ToTable("UserLikedComment", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserLikedPost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.HasKey("UserId", "PostId");

                    b.ToTable("UserLikedPost", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wallet_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("money_for_games");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "DestinationUser")
                        .WithMany()
                        .HasForeignKey("DestinationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "SourceUser")
                        .WithMany()
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTradeDetail", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Item", "Item")
                        .WithMany("ItemTradeDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.ItemTrade", "ItemTrade")
                        .WithMany("ItemTradeDetails")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemTrade");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.StoreTransaction", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("StoreTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Role", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventory", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserPointShopItemInventory", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.PointShopItem", "PointShopItem")
                        .WithMany("UserPointShopItemsInventory")
                        .HasForeignKey("PointShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("UserPointShopItemsInventory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UsersGames", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.FeatureUser", b =>
                {
                    b.HasOne("SteamHub.ApiContract.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Game.CollectionGame", b =>
                {
                    b.HasOne("SteamHub.ApiContract.Models.Collections.Collection", "Collection")
                        .WithMany("CollectionGames")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.ApiContract.Models.Game.OwnedGame", "OwnedGame")
                        .WithMany("CollectionGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("OwnedGame");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Review", b =>
                {
                    b.HasOne("SteamHub.ApiContract.Models.ReviewsUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.SoldGame", b =>
                {
                    b.HasOne("SteamHub.ApiContract.Models.User.User", "User")
                        .WithMany("SoldGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.UserAchievement", b =>
                {
                    b.HasOne("SteamHub.ApiContract.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.ApiContract.Models.User.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Item", b =>
                {
                    b.Navigation("ItemTradeDetails");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.Navigation("ItemTradeDetails");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Navigation("UserPointShopItemsInventory");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Navigation("StoreTransactions");

                    b.Navigation("UserPointShopItemsInventory");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Collections.Collection", b =>
                {
                    b.Navigation("CollectionGames");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.Game.OwnedGame", b =>
                {
                    b.Navigation("CollectionGames");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.ReviewsUser", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SteamHub.ApiContract.Models.User.User", b =>
                {
                    b.Navigation("SoldGames");

                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
